import re
from joblib import load
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, ContextTypes, filters

BOT_TOKEN = '7927790533:AAGeonbnjCnl9LIom9rYflf-O7EsJQMir90'
MODEL = load('npk_ph_predictor.pkl')

def classify(val, thres):
    if val < thres[0]: return '‡¶ñ‡ßÅ‡¶¨ ‡¶ï‡¶Æ'
    elif val < thres[1]: return '‡¶ï‡¶Æ'
    elif val < thres[2]: return '‡¶Æ‡¶æ‡¶ù‡¶æ‡¶∞‡¶ø'
    elif val < thres[3]: return '‡¶â‡¶ö‡ßç‡¶ö'
    else: return '‡¶ñ‡ßÅ‡¶¨ ‡¶â‡¶ö‡ßç‡¶ö'

def generate_advice(n, p, k, ph):
    msg = f"""üìä *Prediction:*
N = {n:.0f} kg/ha
P = {p:.0f} kg/ha
K = {k:.0f} kg/ha
pH = {ph:.1f}

üìå ‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶ø‡¶∂:"""
    tips = []
    if classify(n, [50, 90, 130, 170]) in ['‡¶ñ‡ßÅ‡¶¨ ‡¶ï‡¶Æ', '‡¶ï‡¶Æ']:
        tips.append("‚Ä¢ ‡¶á‡¶â‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ/‡¶ï‡¶Æ‡ßç‡¶™‡ßã‡¶∏‡ßç‡¶ü ‡¶∏‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
    if classify(p, [20, 40, 60, 80]) in ['‡¶ñ‡ßÅ‡¶¨ ‡¶ï‡¶Æ', '‡¶ï‡¶Æ']:
        tips.append("‚Ä¢ TSP ‡¶¨‡¶æ ‡¶°‡¶ø‡¶è‡¶™‡¶ø ‡¶∏‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶®‡•§")
    if classify(k, [40, 80, 120, 160]) in ['‡¶ñ‡ßÅ‡¶¨ ‡¶ï‡¶Æ', '‡¶ï‡¶Æ']:
        tips.append("‚Ä¢ ‡¶è‡¶Æ‡¶ì‡¶™‡¶ø ‡¶¨‡¶æ ‡¶õ‡¶æ‡¶á ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
    if ph < 5.5:
        tips.append("‚Ä¢ ‡¶ö‡ßÅ‡¶® ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ó ‡¶ï‡¶∞‡ßá ‡¶™‡¶ø‡¶è‡¶á‡¶ö ‡¶¨‡¶æ‡ßú‡¶æ‡¶®‡•§")
    elif ph > 8:
        tips.append("‚Ä¢ ‡¶∏‡¶æ‡¶≤‡¶´‡¶æ‡¶∞ ‡¶¨‡¶æ ‡¶ú‡ßà‡¶¨ ‡¶∏‡¶æ‡¶∞ ‡¶¶‡¶ø‡ßü‡ßá ‡¶™‡¶ø‡¶è‡¶á‡¶ö ‡¶ï‡¶Æ‡¶æ‡¶®‡•§")
    if not tips:
        tips.append("‚Ä¢ ‡¶Æ‡¶æ‡¶ü‡¶ø ‡¶∏‡ßÅ‡¶∑‡¶Æ ‡¶Ü‡¶õ‡ßá, ‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶® ‡¶®‡ßá‡¶á‡•§")
    return msg + "\n" + "\n".join(tips)

async def handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Expect 4 comma-separated numbers
    m = re.search(r"(-?\d+\.?\d*),\s*(-?\d+\.?\d*),\s*(-?\d+\.?\d*),\s*(-?\d+\.?\d*)", update.message.text)
    if not m:
        await update.message.reply_text(
            "‚ö†Ô∏è Input format: Temp,Humidity,Rain,Moisture\n"
            "Example: 27.5,75.0,1423,3850"
        )
        return
    try:
        t, h, r, moisture = map(float, m.groups())
        # Use only the first 3 values for the model
        n, p, k, ph = MODEL.predict([[t, h, r]])[0]
    except Exception as e:
        await update.message.reply_text(f"‚ùå Prediction failed: {str(e)}")
        return

    msg = (
        "*SoilSense Data*\n"
        "`Temp(¬∞C),Humidity(%),Rain(mm),Moisture`\n"
        f"{t},{h},{r},{moisture}\n"
        "\n*Predicted [N, P, K, pH]*\n"
        f"`N = {n:.0f}, P = {p:.0f}, K = {k:.0f}, pH = {ph:.2f}`\n\n"
        + generate_advice(n, p, k, ph)
    )
    await update.message.reply_text(msg, parse_mode='Markdown')

if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handler))
    print("Bot is running...")
    app.run_polling()
